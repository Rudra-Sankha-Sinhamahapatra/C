### Representing a Graph ADT in Memory:

A graph abstract data type (ADT) can be represented in memory using different data structures. Two common representations are:

1. **Adjacency Matrix:**
   - A 2D array (matrix) is used to represent a graph.
   - `graph[i][j]` is set to 1 if there is an edge between vertex `i` and `j`.
   - Suitable for dense graphs but can be memory-intensive for sparse graphs.

2. **Adjacency List:**
   - Each vertex has a list of adjacent vertices.
   - Implemented using an array of lists or hash table where each vertex maps to a list of its neighbors.
   - Suitable for sparse graphs and more memory-efficient.

### Data Structures for BFS and DFS:

1. **Queue (for BFS):**
   - A queue data structure is used to implement BFS.
   - Nodes are enqueued when discovered and dequeued when processed.

2. **Stack (for DFS):**
   - A stack (or recursive function call stack) is used to implement DFS.
   - Nodes are pushed onto the stack when discovered and popped off when processed.

### Breadth-First Search (BFS) Algorithm:

BFS explores a graph level by level, visiting all neighbors of a node before moving on to the next level. It can be implemented using a queue.

#### Working of BFS:

1. **Start at the Source Node:**
   - Enqueue the source node into the queue.

2. **Explore Neighbors:**
   - While the queue is not empty:
     - Dequeue a node from the front of the queue.
     - Process the node (e.g., print or store its value).
     - Enqueue all unvisited neighbors of the node.

3. **Repeat:**
   - Repeat steps 2 until the queue is empty.

#### Example:

Consider the following graph:

```
   A -- B -- C
   |    |
   D -- E
```

Starting from node A:

1. Enqueue A
   - Queue: A
2. Dequeue A, process A, enqueue neighbors (B, D)
   - Queue: B, D
3. Dequeue B, process B, enqueue neighbors (A, C, E)
   - Queue: D, A, C, E
4. Dequeue D, process D, enqueue neighbors (A, E)
   - Queue: A, C, E, A, E
5. Continue until the queue is empty.

The BFS order: A, B, D, C, E.

BFS ensures that all nodes at distance 1 are visited before nodes at distance 2, and so on. It's useful for finding the shortest path in an unweighted graph and for exploring connected components.